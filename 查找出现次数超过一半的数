//方法一
class Solution{
public:
    int MoreThanHalfNum_Solution(vector<int> array){
        unordered_ma<int,int> map;
        int half=array.size()/2;
        for(int i=0;i<array.size();i++){
            auto it=map.find(array[i]);//查找map中是否存在array[i]
            if(it != map.end()){//如果没有走到map的末尾的下一个位置即map.end()说明找到了
                map[array[i]]++;
            }
            else{//如果一直找完了map都没有,则会返回map.end()
                map.insert(pair<int,int>(array[i],1));
            }
            if(map[array[i]]>half){//找到大于数组大小一半的数字则返回
                return array[i];
            }
        }
        return 0;//走到这里说明没找到
    }
};

//方法二
class Solution{
public:
    int MoreThanHalfNum_Solution(vector<int> array){
        sort(array.begin(),array.end());
        int target=array[array.size()/2];//中间位置的坐标
        int count=0;
        
        for(int i=0;i<array.size();i++){//拿找到的目标值与数组中元素进行比对,然后统计次数
            if(target==array[i]){
                count++
            }
        }
        if(count>array.size()/2){//出现次数超过数组长度的一半,则就是该元素
            return target;
        }
        return 0;//走到这里说明没找到
    }
};

//方法三
class Solution{
public:
    int MoreThanHalfNum_Solution(vector<int> array){
        if(array.size() == 0){//空数组直接返回
            return 0;
        }
        
        int flag=array[0];
        int count=1;
        for(int i=1;i<array.size();i++){
            if(count==0){//如果计数器为0,说明flag的元素已经和相同数量的不同元素相互抵消完了,换下一个元素进行比较
                flag=array[i];
                count=1;
            }
            else if(array[i]==flag){//相同元素,计数器++
                count++;
            }
            else if(array[i]!=flag){//不同元素相消,计数器--
                count--;
            }
        }//例如{1,2,2,1,3,2,4,2,2}以第一个元素为标志位,与第二个元素相消然后计数器归0,然后换第三个元素作为标志位,重复该操作直到末尾
        
        //相互抵消后剩下的元素就是出现次数超过数组一半的数字,但是还要经过验证
        int temp=0;//临时计数器,记录元素验证时出现的次数
        for(int i=0;i<array.size();++i){
            if(array[i]==flag){
                temp++;
            }
        }
        return temp > array.size()/2 ? flag : 0//如果该元素出现次数超过数组长度的一半,返回该元素否则返回0
    }
};
