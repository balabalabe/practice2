#include <stdio.h>
#define MAX_VERtEX_NUM 20                   //顶点的最大个数
#define VRType int                          //表示顶点之间的关系的变量类型
#define VertexType int                      //图中顶点的数据类型（顶点：vertex）
typedef enum{DG,DN,UDG,UDN}GraphKind;       //枚举图的 4 种类型

typedef struct ArcCell{
    VRType adj;                             //对于无权图，用1或0表示是否相邻；对于带权图，直接为权值（相邻：adjacent）
}ArcCell,AdjMatrix[MAX_VERtEX_NUM][MAX_VERtEX_NUM];//（邻接矩阵：Adjacency Matrix）
/**** 这里等价于，ArcCell AdjMatrix[][]; ArcCell是struct ArcCell的别名，后面定义了一个结构体数组****/

typedef struct MGraph{
    VertexType vexs[MAX_VERtEX_NUM];        //顶点数组，存储图中顶点的值
    AdjMatrix arcs;                         //边（弧）关系数组，记录顶点之间的关系
    int vexnum,arcnum;                      //记录图的顶点数和弧、边数（弧：arc）
    char kind[10];                          //用于选择图的种类
}MGraph;

//输入顶点v，返回该顶点在顶点数组中的位置
int LocateVex(MGraph* G,VertexType v){
    int i=0;
    //遍历一维数组，找到变量v
    for (; i<G->vexnum; i++) {
        if (G->vexs[i]==v) {
            break;
        }
    }
    //如果找不到，输出提示语句，返回-1
    if (i > G->vexnum) {
        printf("该顶点不在图内\n");
        return -1;
    }
    return i;
}

//构造有向图
void CreateDG(MGraph *G){
    scanf("%d,%d",&(G->vexnum),&(G->arcnum));//输入图的顶点数和弧的个数
    for (int i=0; i<G->vexnum; i++) {//依次输入顶点本身的数据
        scanf("%d",&(G->vexs[i]));
    }
    
    for (int i=0; i<G->vexnum; i++) {//初始化二阶矩阵，相邻关系全部归0
        for (int j=0; j<G->vexnum; j++) {
            G->arcs[i][j].adj=0;
        }
    }
    
    for (int i=0; i < G->arcnum; i++) {//在二维数组中添加弧的值
        VertexType v1,v2;
        scanf("%d,%d",&v1,&v2);//从顶点数组中取两个顶点，构成有向图的弧头v1和弧尾v2
        
        int n=LocateVex(G, v1);//获取弧头在顶点数组中的位置
        int m=LocateVex(G, v2);//获取弧尾在顶点数组中的位置
        if (m==-1 || n==-1) {//如果弧头或者弧尾无法在顶点数组中获取到，说明该弧是非法的
            printf("非法的弧\n");
            return;
        }
        
        G->arcs[n][m].adj=1;//检验弧头弧尾无误后，将对应位置的弧关系置为1
    }
}

//构造无向图
void CreateDN(MGraph *G){
    scanf("%d,%d",&(G->vexnum),&(G->arcnum));//输入图的顶点数和边的个数
    for (int i=0; i < G->vexnum; i++) {
        scanf("%d",&(G->vexs[i]));//输入顶点的值
    }
    
    for (int i=0; i < G->vexnum; i++) {//初始化二维数组
        for (int j=0; j < G->vexnum; j++) {
            G->arcs[i][j].adj=0;
        }
    }
    
    for (int i=0; i < G->arcnum; i++) {
        VertexType v1,v2;
        scanf("%d,%d",&v1,&v2);//取顶点数组中的两个顶点，构成无向图的相邻节点v1和v2
        int n=LocateVex(G, v1);//获取v1在顶点数组中的位置
        int m=LocateVex(G, v2);//获取v2在顶点数组中的位置
        
        if (m==-1 ||n==-1) {
            printf("非法的边\n");
            return;
        }
        
        G->arcs[n][m].adj=1;
        G->arcs[m][n].adj=1;//无向图的二阶矩阵沿主对角线对称，因此对称位置也置为1
    }
}

void CreateUDG(MGraph *G){//构造有向网，和有向图不同的是二阶矩阵中存储的是权值。
    scanf("%d,%d",&(G->vexnum),&(G->arcnum));
    for (int i=0; i<G->vexnum; i++) {
        scanf("%d",&(G->vexs[i]));
    }
    for (int i=0; i<G->vexnum; i++) {
        for (int j=0; j<G->vexnum; j++) {
            G->arcs[i][j].adj=0;
        }
    }
    for (int i=0; i<G->arcnum; i++) {
        VertexType v1,v2;
        int w;//权值
        scanf("%d,%d,%d",&v1,&v2,&w);//取两个顶点构成弧，并输入该弧的权值
        int n=LocateVex(G, v1);
        int m=LocateVex(G, v2);
        if (m==-1 ||n==-1) {
            printf("非法的弧\n");
            return;
        }
        G->arcs[n][m].adj=w;//网中存的是权值，而不是用1表示关系
    }
}

void CreateUDN(MGraph* G){//构造无向网。和无向图唯一的区别就是二阶矩阵中存储的是权值
    scanf("%d,%d",&(G->vexnum),&(G->arcnum));
    for (int i=0; i<G->vexnum; i++) {
        scanf("%d",&(G->vexs[i]));
    }
    for (int i=0; i<G->vexnum; i++) {
        for (int j=0; j<G->vexnum; j++) {
            G->arcs[i][j].adj=0;
        }
    }
    for (int i=0; i<G->arcnum; i++) {
        VertexType v1,v2;
        int w;//权值
        scanf("%d,%d,%d",&v1,&v2,&w);
        int m=LocateVex(G, v1);
        int n=LocateVex(G, v2);
        if (m==-1 ||n==-1) {
            printf("非法的边\n");
            return;
        }
        G->arcs[n][m].adj=w;
        G->arcs[m][n].adj=w;//矩阵对称
    }
}

void CreateGraph(MGraph *G){//选择图的类型进行创建
    scanf("%s",G->kind);
    switch (G->kind) {
        case DG:
            return CreateDG(G);
            break;
        case DN:
            return CreateDN(G);
            break;
        case UDG:
            return CreateUDG(G);
            break;
        case UDN:
            return CreateUDN(G);
            break;
        default:
            break;
    }
}

void PrintGrapth(MGraph G){//输出函数
    for (int i = 0; i < G.vexnum; i++){
        for (int j = 0; j < G.vexnum; j++){
            printf("%d ", G.arcs[i][j].adj);
        }
        printf("\n");
    }
}

int main() {
    MGraph G;//建立一个图的变量
    CreateGraph(&G);//调用创建函数，传入地址参数
    PrintGrapth(G);//输出图的二阶矩阵
    return 0;
}
