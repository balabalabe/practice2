class bitset{
public:
    bitset(size_t bitnum):_bitnum(bitnum){ //初始化，申请bitnum位的位图
        _bit.resize((bitnum >> 5)+1, 0); //根据位数确定位图数组空间大小，int型有4个比特位，对应8个字节，可以标识32个数据
    }
    void set(size_t x){
        size_t index = x >> 5; //计算x是数组中第几个区间
        size_t num = x % 32; //计算x是这个区间中的第几个位
        _bit[index] |= (1 << num); //把对应的比特位置为1
    }
    void reset(size_t x){
        size_t index = x >> 5;
        size_t num = x % 32;
        _bit[index] &= (~(1 << num)); //把对应的比特位置为0
    }
    bool test(size_t x){ //判断对应位是0还是1
        size_t index = x >> 5;
        size_t num = x % 32;
        return _bit[index] & (1 << num); //与完之后的结果如果非零就说明存在，为零说明不存在
    }
    
private:
    vector<int> _bit;
    size_t _bitnum;
};

void test_bitset()
{
	bitset bs(10000);
	bs.set(6666);
	bs.set(666);
	bs.set(66);
	bs.set(6);

	cout << bs.test(6) << endl;//存在
	cout << bs.test(66) << endl;//存在
	cout << bs.test(666) << endl;//存在
	cout << bs.test(6666) << endl;//存在
	cout << bs.test(16) << endl;//不存在
}
