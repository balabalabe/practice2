#include<iostream>
using namespace std;

void swap(int a[], int i, int j)
{
    int temp = a[i];
    a[i] = a[j];
    a[j] = temp;
}

void adjustHeap(int a[], int len, int i) { //调整堆，len是数组长度，i是待调整元素下标
    int minIndex = i;
    if (2 * i + 1 < len && a[2 * i + 1] < a[i]) { //如果左节点值比父节点小
        minIndex = 2 * i + 1;
    }
    if (2 * i + 2 < len && a[2 * i + 2] < a[i] && a[i * 2 + 1]>a[i * 2 + 2]) { //如果右节点值比父节点小
        minIndex = 2 * i + 2;
    }
    if (minIndex != i) { //重新调整堆
        swap(a, minIndex, i);
        adjustHeap(a, len, minIndex);
    }
}

void buildMinHeap(int a[], int len) { //从最后一个非叶子节点从下往上建立最小堆
    for (int i = (len - 2) / 2; i >= 0; i--) {
        adjustHeap(a, len, i);
    }
}

void heapFindMaxK(int a[], int len, int k) { //用前k个元素建立最小堆
    buildMinHeap(a, k);
    for (int i = k; i < len; i++) {
        if (a[i] > a[0]) {
            swap(a, 0, i);
            adjustHeap(a, k, 0);
        }
    }
}

int main() {
    int a[8] = { 6,8,3,1,2,4,5,9 };
    int len = sizeof(a) / sizeof(int);
    int k = 3;
    heapFindMaxK(a, len, k);
    for (int i = 0; i < k; i++) {
        cout << a[i] << " ";
    }
}
